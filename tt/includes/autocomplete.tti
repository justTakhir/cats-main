[% IF js.autocomplete %]
[%- PROCESS "lang/$lang/autocomplete.tti" -%]
<script nonce="[% nonce %]">

var AutoComplete = (function() {
  var escape = function(s) { return s.replace(/</g, '&lt;').replace(/\"/g, '&quot;'); };
  var escape_all = function (a) { return $.map(a, escape); };
  var fmt = function(fmt, a) { return fmt.replace(/{(\d+)}/g, function(m, i) { return a[i]; }); };

  var bold_prefix = function(s, prefix) {
    return s.substr(0, prefix.length) === prefix ?
      fmt('<b>{0}</b>{1}', escape_all([ prefix, s.substr(prefix.length) ])) :
      escape(s);
  };

  var bold_substr = function(s, substr) {
    var p = s.indexOf(substr);
    return p >= 0 ?
      fmt('{0}<b>{1}</b>{2}', escape_all([ s.substr(0, p), substr, s.substr(p + substr.length) ])) :
      escape(s);
  };

  var formatResult = {
    acc_groups: function (suggestion, currentValue) {
      return bold_substr(suggestion.data.name, currentValue);
    },
    contest_tags: function (suggestion, currentValue) {
      return bold_prefix(suggestion.data.name, currentValue);
    },
    contests: function (suggestion, currentValue) {
      return bold_substr(suggestion.data.title, currentValue);
    },
    files: function (suggestion, currentValue) {
      return bold_prefix(suggestion.data.name, currentValue) + ' ' +
        suggestion.data.description.substr(0, 20);
    },
    users: function (suggestion, currentValue) {
      return bold_prefix(suggestion.data.login, currentValue) +
        ' (' + bold_prefix(suggestion.data.team_name, currentValue) + ')';
    },
  };

  var apply = function(input, url, extra) {
    var params = {
      minChars: 2,
      deferRequestBy: 100,
      showNoSuggestionNotice: true,
      noSuggestionNotice: '[% capt.no_suggestion %]',
      serviceUrl: url,
      formatResult: formatResult.users,
    };
    if (extra)
      for (var p in extra)
        params[p] = extra[p];
    input.autocomplete(params);
    var on_focus = function () {
      input.autocomplete('setOptions', {
        width: Math.min(input.width() * 2, window.innerWidth * 0.9 - input[0].offsetLeft) });
      input.off('focus', on_focus);
    };
    input.on('focus', on_focus);
  };

  return {
    apply: apply,
    bold_substr: bold_substr,
    bold_prefix: bold_prefix,
    fmt: fmt,
    formatResult: formatResult,
  };
})();

var autocomplete = AutoComplete.apply;

</script>
[% END -%]
